{"version":3,"sources":["components/App.js","actions/index.js","types.js","reducers/index.js","index.js"],"names":["App","state","text","date","Date","render_Reminders","reminders","props","className","map","reminder","key","id","momment","fromNow","onClick","delete_reminder","src","alt","type","onChange","e","setState","target","value","placeholder","this","placeholderText","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","add_reminder","clear_reminders","Component","connect","action","read_cookie","Math","random","bake_cookie","filter","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"qPAQMA,G,yNACJC,MAAQ,CACNC,KAAM,GACNC,KAAM,IAAIC,M,EAGZC,iBAAmB,WAAM,IAChBC,EAAa,EAAKC,MAAlBD,UACP,OACE,wBAAIE,UAAU,cAEZF,EAAUG,KAAI,SAAAC,GACZ,OACE,wBAAIC,IAAKD,EAASE,GAAIJ,UAAU,2BAC9B,6BAAME,EAASR,MACf,6BAAMW,IAAQ,IAAIT,KAAKM,EAASP,OAAOW,WACvC,yBAAKN,UAAU,eAAeO,QAAS,kBAAM,EAAKR,MAAMS,gBAAgBN,EAASE,MAAjF,W,wEAQF,IAAD,OACP,OACC,yBAAKJ,UAAU,OACb,yBAAKS,IAAI,kBAAkBC,IAAI,aAC/B,yBAAKV,UAAU,kBACX,mDAEJ,2BAAOW,KAAK,OAAQC,SAAU,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACpB,KAAKmB,EAAEE,OAAOC,SAASC,YAAY,uBAAuBjB,UAAU,eAAegB,MAAOE,KAAKzB,MAAMC,OACzJ,kBAAC,IAAD,CACCM,UAAU,eACVmB,gBAAgB,cAChBH,MAAOE,KAAKzB,MAAME,KAClByB,SAAUF,KAAKzB,MAAME,KACrBiB,SAAU,SAAAjB,GAAI,OAAI,EAAKmB,SAAS,CAACnB,KAAKA,KACtC0B,gBAAc,EACdC,WAAW,QACXC,cAAe,GACfC,YAAY,OACZC,WAAW,yBAGZ,4BAAQzB,UAAU,4BACTO,QAAS,WACP,EAAKR,MAAM2B,aAAa,EAAKjC,MAAMC,KAAK,EAAKD,MAAME,MACnD,EAAKmB,SAAS,CAACpB,KAAK,GAAGC,KAAK,OAHvC,gBAOAuB,KAAKrB,mBACL,4BAAQG,UAAU,yCAA0CO,QAAS,kBAAM,EAAKR,MAAM4B,oBAAtF,c,GArDWC,cA2DHC,eAAW,SAAApC,GAAS,MAAM,CAACK,UAAWL,KAE3B,CAACiC,aCnEC,SAAChC,EAAKC,GAM9B,MALe,CACXgB,KCJoB,eDKpBjB,OACAC,SDiEkBa,gBC3DK,SAACJ,GAK5B,MAJe,CACXO,KCbuB,kBDcvBP,OD0DkBuB,gBCrDK,WAI3B,MAHe,CACXhB,KCpBuB,qBFiEhBkB,CAOSrC,G,yCGhDTM,EAxBG,WAAsB,IAArBL,EAAoB,uDAAd,GAAGqC,EAAW,uCAC/BhC,EAAY,KAGhB,OADAL,EAAQsC,sBAAY,aDLI,iBCMrBD,EAAOnB,MACNb,EAAS,sBAAOL,GAAP,CAAa,CAACC,KAAKoC,EAAOpC,KAAOC,KAAOmC,EAAOnC,KAAOS,GAAG4B,KAAKC,YACvEC,sBAAY,YAAYpC,GACjBA,GDRgB,oBCUnBgC,EAAOnB,MACXb,EAAYL,EAAM0C,QAAO,SAAAjC,GAAQ,OAAGA,EAASE,KAAO0B,EAAO1B,MAC3D8B,sBAAY,YAAYpC,GACjBA,GDZgB,oBCcnBgC,EAAOnB,MACXb,EAAY,GACZoC,sBAAY,YAAYpC,GACjBA,GAGAL,GCdT2C,EAAQC,YAAYvC,GAC1BwC,IAASC,OACN,kBAAC,IAAD,CAAUH,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,MAAzB,KAA8CI,SAASC,eAAe,U","file":"static/js/main.d08518d6.chunk.js","sourcesContent":["import React, { Component } from \"react\"; \r\nimport {add_reminder,delete_reminder,clear_reminders} from '../actions';\r\nimport {connect} from 'react-redux';\r\nimport momment from 'moment';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport '../index.css'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    text: '',\r\n    date: new Date()\r\n  }\r\n\r\n  render_Reminders = ()=> {\r\n    const {reminders} = this.props;\r\n    return(\r\n      <ul className=\"list-group\">\r\n      {\r\n        reminders.map(reminder =>{\r\n          return (\r\n            <li key={reminder.id} className=\"list-group-item colorLi\">\r\n              <div>{reminder.text}</div>\r\n              <div>{momment(new Date(reminder.date)).fromNow()}</div>\r\n              <div className=\" iconX btn  \" onClick={() => this.props.delete_reminder(reminder.id)}>X</div>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    </ul>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n     <div className=\"App\">\r\n       <img src=\"../reminder.png\" alt='reminder' />\r\n       <div className=\"reminder-title\">\r\n           <h2>What Should U Do ?</h2>\r\n       </div>\r\n       <input type=\"text\"  onChange={(e) => this.setState({text:e.target.value})} placeholder=\"Enter What U Do .. ?\" className=\"form-control\" value={this.state.text}/>\r\n       <DatePicker\r\n        className=\"form-control\" \r\n        placeholderText=\"Select Date\"\r\n        value={this.state.date}\r\n        selected={this.state.date}\r\n        onChange={date => this.setState({date:date})}\r\n        showTimeSelect\r\n        timeFormat=\"HH:mm\"\r\n        timeIntervals={15}\r\n        timeCaption=\"Time\"\r\n        dateFormat=\"MMMM d, yyyy h:mm aa\"\r\n        />\r\n       \r\n       <button className=\"btn btn-primary btn-block\"\r\n                onClick={() => {\r\n                  this.props.add_reminder(this.state.text,this.state.date)\r\n                  this.setState({text:'',date:''})\r\n                }}\r\n                >Add Reminder</button>\r\n\r\n      {this.render_Reminders()}\r\n       <button className=\"btn btn-danger btn-block clearReminder\"  onClick={() => this.props.clear_reminders()} >Clear</button>\r\n     </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(   state =>{return{reminders: state}}\r\n                          ,\r\n                          {add_reminder\r\n                          ,\r\n                          delete_reminder\r\n                          ,\r\n                          clear_reminders}\r\n                      )(App);","import {ADD_REMINDER,DELETE_REMINDER,CLEAR_REMINDERS} from '../types'\r\n\r\nexport const add_reminder = (text,date) =>{\r\n    const action = {\r\n        type : ADD_REMINDER,\r\n        text,\r\n        date\r\n    }\r\n    return action\r\n}\r\n\r\n\r\nexport const delete_reminder = (id) =>{\r\n    const action = {\r\n        type : DELETE_REMINDER,\r\n        id\r\n    }\r\n    return action\r\n}\r\n\r\nexport const clear_reminders = () =>{\r\n    const action = {\r\n        type : CLEAR_REMINDERS,\r\n    }\r\n    return action\r\n}\r\n\r\n\r\n","export const ADD_REMINDER = 'ADD_REMINDER'\r\nexport const DELETE_REMINDER = 'DELETE_REMINDER'\r\nexport const CLEAR_REMINDERS = 'CLEAR_REMINDERS'","import {ADD_REMINDER,DELETE_REMINDER,CLEAR_REMINDERS} from '../types'\r\nimport { bake_cookie, read_cookie} from 'sfcookies'\r\nconst reminders = (state=[],action) => {\r\n    let reminders = null;\r\n    \r\n    state = read_cookie('reminders')\r\n    if(action.type === ADD_REMINDER ){\r\n        reminders = [...state,{text:action.text , date : action.date , id:Math.random()}]\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }\r\n    else if(action.type === DELETE_REMINDER){\r\n        reminders = state.filter(reminder=> reminder.id !== action.id)\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }\r\n    else if(action.type === CLEAR_REMINDERS){\r\n        reminders = []\r\n        bake_cookie('reminders',reminders);\r\n        return reminders\r\n    }\r\n    else{\r\n        return state\r\n    }\r\n}\r\n\r\nexport default reminders;","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./components/App\";\nimport ReactDOM from 'react-dom';\nimport {createStore} from 'redux';\nimport { Provider } from \"react-redux\";\nimport reminders from './reducers'\n\nconst store = createStore(reminders)\nReactDOM.render(\n   <Provider store={store}> <App /> </Provider> ,document.getElementById('root')\n)\n\n"],"sourceRoot":""}